x : int = 1;
y : int = x;
z := x + y;
print z;

MOVCNST x 1
MOV y x
ADD z x y
PRINT z

x := 2;
y := 3;
z : int;
if x > y {
    z = x;
} else {
    z = y;
}
print z;

 1: MOVCNST x 2
 2: MOVCNST y 3
 3: G $0 x y
 6: IFGOTO $0 :10
 7: MOV z y
 8: GOTO :10
 9: MOV z x 
10: PRINT z

sign : int;
if x < 0 {
    sign = -1;
} else if x == 0 {
    sign = 0;
} else {
    sign = 1;
}

 0: MOV $0 x
 1: MOVCONST $1 0
 3: L $2 $0 $1
 4: IFGOTO $2 13
 5: MOV $0 x
 6: MOVCONST $1 0
 7: EQ $2 $0 $1
 8: IFGOTO $2 11
 9: MOVCONST sign 1
10: GOTO 14
11: MOVCONST sign 0
12: GOTO 14
13: MOVCONST sign -1
14: NOP

gcd(x: int, y: int) -> int {
    while y != 0 {
        t := y;
        y = x % y;
        x = t;
    }
    return x;
}

 0: MOV $0 y
 1: MOVCONST $1 0 
 2: NE $2 $0 $1
 3: IFGOTO $2 ...
 4: MOV t y
 5: MOV $0 x 
 6: MOV $1 y
 7: MOD $2 $0 $1
 8: MOV y $2
 9: MOV x t
10: GOTO :0
11: MOV #0 x
12: RET
    
factorial := (x: int) -> int {
    if x == 1 {
        return 1;
    } else {
        return factorial(x - 1) * x;
    }
}

factorial:
 0: MOV !0 x 
 1: MOVCONST $1 1
 2: EQ $2 $0 $1 
 3: IFGOTO ...
 4: MOV $0 x 
 5: SUB $1 $0 1
 6: PUSH !0 $1
 7: CALL factorial
 8: 